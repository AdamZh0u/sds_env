---
title: "Programming Environment"
author: "Jon Reades"
date: "9/9/2022"
---

Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that **Docker** is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.

A very small number of students are **unable to run Docker** on older machines running Windows 10 Home, in which case **Anaconda Python** can be used with the [configuration [that we provide](../conda/index.qmd). However, if your machine runs Docker then you **must** use Docker: this isolates the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested). 

**Anaconda is only supported as a last resort**.

## Docker

There are many options for how Docker sets up and runs 'virtual machines' (known as 'images') on your local system (i.e. the computer on which you're reading this now!). The `jreades/sds:2022` image contains (we hope) all of the tools that you'll need to get through the majority of our programme when you are working in Python. There are so many options that we actually [created a script](https://github.com/jreades/sds_env/raw/master/docker/docker.sh) to do most of it for you; however, this needs to be paired with a [configuration file](https://github.com/jreades/sds_env/raw/master/docker/config.sh) that is in the same folder as the `docker.sh` script so it's an extra step to getting up and running.

The *bare minimum* for getting up and running (once you've installed Docker) is:

```bash
docker run --rm -d --name {{< var env.name >}} -p 8888:8888 \
   -v "$(pwd):/home/jovyan/work" \
  {{< var env.image >}} start.sh jupyter lab \
  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```

A more extensive discussion (and additional instructions) can be found on the [Using Docker](../docker/index.qmd) page.

::: {.callout-warning}
## Known Windows Issues

On Windows, if you cannot see any of the files on your _main_ system when you start up Docker with the SDS image, then please try replacing this part of the Docker command (see details below):

`-v "${pwd}":/home/jovyan/work`

with:

`--mount type=bind,source="$(pwd)",target=/home/jovyan/work`

This should enable you to see any existing files that you have, while also allowing you to save any files that you create.
:::

As well...

::: {.callout-warning}
## Known Mac Issues 

On Mac, if you are using one of the new M1 or M2 chips on your _main_ system then you need to tell Docker to emulate the older Intel chipset (which is all I have access to!) by changing this part of the Docker `run` command (see details below):

`--name {{< var env.image >}} -p 8888:8888`

to:

`--name {{< var env.image >}} --platform linux/amd64 -p 8888:8888`

:::

## VSCode

By default, Docker+JupyterLab enables you to interact with code via a web browser, and we've built in many useful tools for a streamlined, effective in-browser experience. However, if you're more familiar with IDEs then VSCode offers the ability to intergrate with Docker images so that you write your code in VSCode and it's sent to the Docker image for execution. This requires modifying the `docker run` command as detailed in the [Using Docker](../docker/index.qmd) page.

## Anaconda Python

Again, we *only* support Anaconda Python as a fallback for students who would otherwise be unable to complete the module because their computer does not support Docker. You are always free to install Anaconda Python and to [use our YAML configuration script](../conda/index.qmd) to install the SDS environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the SDS environment.

We believe that the replication advantages of *virtualisation* outweigh the disbenefits in terms of *performance*. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the *foundations* of data science. Eventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs.

