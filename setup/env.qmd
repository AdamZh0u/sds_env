---
title: "Programming Environment"
author: "Jon Reades"
date: "9/7/2023"
---

Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that **Docker** is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.

::: {.callout-important}
## Base Utilities

Before beginning *any* of the steps below, make sure you have installed the [Base Utilities](../req/base.qmd) for your Operating System and checked the other hardware and software requirements.

:::

Since Docker is *very* complex, you might want to read the **[Understanding Docker](../docker/index.qmd#understanding-docker)** section on the 'additional information' page. We have tried to explain in *fairly* simple terms how it works, though we can't take away all of the complexity.

A very small number of students are **unable to run Docker** on older machines running Windows 10 Home, in which case **Anaconda Python** can be used with the [configuration [that we provide](../conda/index.qmd). However, if your machine runs Docker then you **must** use Docker: this isolates the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested). 

**Anaconda is only supported as a last resort**.

::: {.callout-tip}
## Copy Code to Clipboard 

Whenever you see a code block (like the one in the next section), you will _also_ see a 'clipboard' icon (![Copy to Clipboard Icon](../img/copy-to-clipboard.png){height="18px"}) to the right. If you click on that, the code will be copied to your computer's 'clipboard' so that you can then paste it into the Terminal. That will save you have to laboriously type the commands, which usually leads to errors. 

**On Windows** (especially if you are using a non-Latin alphabet) sometimes the `\` are incorrectly copied and become other characters (e.g. a &#165;!). In that case you need to run everything on one line. For the key commands we've provided a one-line version as well to make your life... easier.

:::

## Docker

To start, you will need to [download Docker](https://www.docker.com) and install it. You must then start the Docker app running before any of these commands will work. You'll know that you've succeeded when you see the 'Docker Desktop' window appear listing downloaded images and running containers.

::: {.callout-warning}
## Windows 

You should follow [this Microsoft guide](https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers#install-docker-desktop) to ensure that `Use the WSL 2 based engine` is checked. This may require restarting Docker.
:::

To test if Docker is installed correctly, try running this command in the Shell/Terminal:

::: {.panel-tabset}

## Windows and (older) Apples

If your Apple computer has an Intel chipset (see: &#63743; -> `About this Mac` -> `Processor`) or is running Windows:

```bash
docker pull {{< var env.image >}}
```

## Apple M1/M2 Silicon

If your Apple computer has an M1 or M2 'Silicon' chipset (see: &#63743; -> `About this Mac` -> `Processor`): 

```bash
docker pull {{< var env.image >}}-silicon
```

:::

You should see a lot of 'layers' being copied down -- about 10GB worth -- so don't do this over a cellular connection! If that doesn't work, then please move to the [next section](#deep-dive-into-setting-up-docker) for more support. 

::: {.panel-tabset}

## For Mac/Linux

Once the `pull` process completes you'll need to copy+paste the following into the Shell/Terminal as the *bare minimum* for getting up and running:

```bash
docker run --rm -d --name {{< var env.name >}} -p 8888:8888 \
   -v "$(pwd):/home/jovyan/work" \
  {{< var env.image >}} start.sh jupyter lab \
  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```

## For Windows

Once the `pull` process completes you'll need to copy+paste the following into the Shell/Terminal. Note that this is the one-line version for Windows users:

```bash
docker run --rm -d --name {{< var env.name >}} -p 8888:8888 -v "$(pwd):/home/jovyan/work" {{< var env.image >}} start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```

:::


Many students will have issues at this point, in which case you'll need to look in the [next section](#deep-dive-into-setting-up-docker) for help. However, if you're one of the lucky ones then you should now be able to connect to the virtual machine by pointing your browser at: [localhost:8888](http://localhost:8888/lab/). If _this_ has worked as well, then you should see something like this:

![Jupyter Lab Success](../img/Jupyter_Lab.png){height="350px"}

#### Deep Dive into Setting up Docker

A more extensive discussion (**and additional instructions**) can be found on the [**Using Docker**](../docker/index.qmd#installing) page.

## VSCode

We have built the `{{< var env.image >}}` image for a streamlined, effective in-browser experience. However, if you're more familiar with IDEs then [VSCode](https://code.visualstudio.com) offers the ability to intergrate with Docker images so that you write your code in VSCode and it's sent to the Docker image for execution. You can read the instructions on the more detailed [**Using Docker**](../docker/index.qmd#vscode-integration) page.

## Anaconda Python

::: {.callout-warning}

We *only* support Anaconda Python as a fallback for students who would otherwise be unable to complete the module because their computer does not support Docker. If you *choose* to use Anaconda (but could run Docker) then we will not be able to support you.

:::

You are always free to install Anaconda Python and to [use our YAML configuration script](../conda/index.qmd) to install the SDS environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the SDS environment.

We believe that the replication advantages of *virtualisation* outweigh the disbenefits in terms of *performance*. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the *foundations* of data science. 

Eventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs.


