---
title: "Programming Environment"
author: "Jon Reades"
date: "9/7/2023"
---

Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that **Docker**^[And Podman, which is basically the same thing.] is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.

::: {.callout-important}
## Base Utilities

Before beginning *any* of the steps below, make sure you have installed the [Base Utilities](../req/base.qmd) for your Operating System and checked the other hardware and software requirements.

:::

## Installing the Programming Tools

99.9% of you will want to following the [Programming Tools](./install_fest.qmd) instructions to install Docker Desktop. This will give you a consistent programming environment that is isolated from your computer and that is the same as that used by the rest of the class. However, if you are unable to run Docker on your computer then you can use Anaconda Python as a fallback.

## Anaconda Python

::: {.callout-warning}

We *only* support Anaconda Python as a fallback for students who would otherwise be unable to complete the module because their computer does not support Docker. If you *choose* to use Anaconda (but could run Docker) then we will not be able to support you.

:::

A very small number of students are **unable to run Docker** on computers running Windows 10 Home (in 23/24 there were *none*), in which case **Anaconda Python** can be used with the configuration [that we provide](../conda/index.qmd). However, if your machine runs Docker then [you **must** use Docker](../docker/index.qmd): this isolates the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested). 

**Anaconda is only supported as a last resort**.

However you are always free to install Anaconda Python and to [use our YAML configuration script](../conda/index.qmd) to install the SDS environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the SDS environment.

We believe that the replication advantages of *virtualisation* outweigh the disbenefits in terms of *performance*. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the *foundations* of data science. 

Eventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs.
