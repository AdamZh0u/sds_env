---
title: "Using Docker"
author: "Jon Reades"
date: "9/7/2023"
filters:
  - lightbox
lightbox:
  match: auto
  effect: fade
  desc-position: right
  loop: false
---

You will need to install **and** run [Docker](https://www.docker.com) to be able to install the Spatial Data Science (SDS) environment. So after installing the Docker application, please make sure that you launch the application (especially on Windows) at least once before trying to run any Docker commands on the command line. You'll know that you've done this is you see the 'Docker Desktop' window which lists downloaded images and running containers.

::: {.callout-tip}
## Copy Code to Clipboard

Whenever you see a code block (like the one in the next section), you will _also_ see a 'clipboard' icon (![Copy to Clipboard Icon](../img/copy-to-clipboard.png){height="18px"}) to the right. If you click on that, the code will be copied to your computer's 'clipboard' so that you can then paste it into the Terminal. That will save you have to laboriously type the commands, which usually leads to errors.

:::

## Understanding Docker

In order to make use of Docker (and understand what's happening when you get errors), it's helpful to have _some_ sense of what's going on behind the scenes. You can click on the image below to make it larger, or you can download and print out [a PDF version](../img/Docker.pdf).

![Sketch of Docker Usage](../img/Docker.png){.lightbox}

So here's what's happening:

1. You issue the `docker pull {{< var env.image >}}` command to your computer, which turns around and asks Docker Hub for a copy of this image. Docker Hub responds by transferring a copy of the `{{< var env.image >}}` **image** to your computer. You now have a file containing all the instructions to set up and run a **virtual machine** on your computer.^[A virtual machine is just a computer that runs _on_ your computer. So it 'borrows' resources like hard drive space, memory, and processor in order to behave like an independent computer that you can interact with in various ways.]
3. You issue the `docker run ... {{< var env.image >}} ...` command to your computer, which uses the `{{< var env.image >}}` image as a template to create a **container** called `{{< var env.name >}}`^[A container is the name Docker uses to refer to a _running_ virtual machine. The image on its own does nothing until you tell docker to `run` it, at which point it becomes a container!]. `{{< var env.name >}}` will do _whatever_ it was told to do by its creator. This could be wait to run Python code, start up a database, serve web pages, the list is practically endless. But {{< var env.name >}} is _read-only_, although you can make changes to the container while it's running, as soon as you shut it down those changes are lost. So you cannot break a Docker image, only a container. And if you do that, you delete the container and start a new one from the image... we can cover this if you ever do it.
4. As part of the `docker run` command, we also told Docker what resources the container could access. There are two main types of resources for our purposes:
    - A **mount point** which is a part of your computer's hard drive that Docker can use to write things down permanently. We use `$(pwd)`, which is short-hand for `print working directory` and refers to the 'place' on your computer where we issued the `docker run` command. We tell Docker to connect this to a directory called `work` (which resides in `/home/jovyan/`) on the `{{< var env.name >}}` container. This allows you to share data between the container and your computer, and for changes to be saved when you shut down Docker.
    - One or more **ports** which are like channels on a radio where the container can talk to other computers (including yours). In this case, we connect port 8888 on `{{< var env.name >}}` to port 8888 on your computer. And _that_ is why you have to tell your browser to go to [`localhost:8888`](http://localhost:8888) to access Jupyter Lab.
5. Now when you type things into the browser and tell code to 'run', what's actually happening is that your computer is forwarding the request to the container, which does its thing, updates the web page, and this change is then forwarded back to you via the browser.
6. This shows the anatomy of the basic Docker command below to help you understand what all those numbers and letters mean.

## Installing

:::{.callout-warning}
## Essential Topic

This next section is _essential_ to running the {{< var env.name >}} environment.

:::

You can download the {{< var env.image >}} image by opening up a Shell/Terminal and simply running:

```bash
docker pull {{< var env.image >}}
```

Once the image has been downloaded it will be saved on your computer and you will not need to download it again. This means that you can code off-line... on a plane... on a train... on a boat... wherever you can safely use your laptop!

However, before you move on to the next step, please run the Docker application by double-clicking it (Mac) or searching for it in the Windows menu (PC). You should wait until you see the 'Docker Desktop' window appear before moving to the next step.

## Jupyter Lab

:::{.callout-warning}
## Essential Topic

This next section is _essential_ to running the {{< var env.name >}} environment, but for most users this is the only thing that you need to do to get started.

:::

:::{.callout-important}
## M1/M2 Macs

If you are using a M1 or M2 Mac then you may need to change the command below as follows: `-d -p 8888:8888` becomes `-d --platform linux/amd64 -p 8888:8888`. 

:::

The basic command to launch the programming environment is:

```bash
docker run --name {{< var env.name >}} --rm -d -p 8888:8888 \ 
  -v "$(pwd):/home/jovyan/work" \
  {{< var env.image >}} start.sh jupyter lab \
  --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```

And here's the one-line version for Windows users:

```bash
docker run --name {{< var env.name >}} --rm -d -p 8888:8888 -v "$(pwd):/home/jovyan/work" {{< var env.image >}} start.sh jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```
**Note**: the `pwd` in the command above means use the _current_ directory. So if you simply open a Terminal, Git Bash, or Command Prompt then Docker will 'mount' (_i.e._ make visible to the programming environment) the current directory as `work` in the programming environment. This is most likely to be your home directory and means that _everything_ in your home directory is potentially delete-able or write-able and *that* is a major security risk. 

I would _strongly_ suggest that you `cd` (Change Directory) to a sub-folder such as `$HOME/Documents/CASA/` so that you have the link `work <-> CASA` between the virtual machine and your computer (which is the 'host'). This will prevent Docker accessing more of your hard drive than it needs to and is, consequently, a bit more secure.

If things have gone well then you should now be able to connect to the virtual machine by pointing your browser at: [localhost:8888](http://localhost:8888/lab/) and you should see something like this:

![Jupyter Lab Success](../img/Jupyter_Lab.png){height="350px"}


## Bash Script

:::{.callout-warning}
### Intermediate Topic

This next section is _only_ if you want to start using multiple images/containers or manipulating the way in which the {{< var env.image >}} runs. **This is _not_ needed for most students**.

:::

There are so many options that we [created a Bash script](https://github.com/jreades/sds_env/raw/master/docker/docker.sh) to do most of it for you; however, this needs to be paired with a [configuration file](https://github.com/jreades/sds_env/raw/master/docker/config.sh) that is kept in the same folder as the `docker.sh` script. So it's an extra step to getting up and running, but it allows you to easily change the port on which Jupyter Lab is served as well as to turn Quarto and Dask on/off by commenting/editing/uncommenting the port number in the `config.sh` file.

This simplifies the process to the point of starting Docker with: 
```shell
bash docker.sh start
```

And you can cleanly shut down the container using: 
```shell
bash docker.sh stop
```

## Dask and Quarto

:::{.callout-warning}
### Advanced Topic

This next section is _only_ if you need to run either Dask or Quarto (both of which are provided by {{< var env.image >}}). **This is _not_ needed for most students**.

:::

To run Dask and Quarto you need to 'open up' other ports on the Docker image:

```bash
docker run --name {{< var env.name >}} --rm -d \
  -p 8888:8888 -p 4201:4201 -p 8787:8787 \
  -v "$(pwd):/home/jovyan/work" \
  {{< var env.image >}} jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```

You will then need to ensure that Quarto runs on *the same port* when you start it in Docker:

```bash
quarto preview --host 0.0.0.0 --port 4201
```

Notice the everything to do with Quarto is on port `4201`, but note additionally the `--host 0.0.0.0` that is required to allow you to view Quarto's output if you want to serve a web site, for instance, instead of static content *outside* of the Docker container.

The Dask port is where the Dask task manager will be visible when you are making full use of its multiprocessing features within the Docker container (e.g. using four cores at once where you've enabled this is Docker preferences on your [Mac](https://docs.docker.com/desktop/settings/mac/) or [Windows](https://docs.docker.com/desktop/settings/windows/) machined).

## VSCode Integration

:::{.callout-warning}
## Advanced Topic

This next section is _only_ if you want to program in VSCode instead of Jupyter Lab. **This is _not_ needed for most students**.

:::

In principle the below will work. We have it working on Mac OSX and the same process *should* work on Windows. In practice, this should be considered a '**beta feature**' in the sense that the documentation is still in development and we're working out a few kinks. We'll keep you posted on our progress!

### Using Devcontainer

The easier (but less tested) way to connect is to download the contents of `test-vscode-project` [from GitHub](https://github.com/jreades/sds_env/tree/master/test-vscode-project). You should place the three resources in the same directory on your computer where you plan to save your notebooks, data, and other resources (e.g. `$HOME/Documents/CASA/fsds/`). 

You then tell VSCode to `Open Workspace from File` and point it to this directory. It should then ask if you want to run the container associated with the project. The first time you do this it may take some time to get started as it _still_ has to pull the image from Docker Hub. You can break this into steps by running `docker pull {{< var env.image >}}` _before_ dealing with downloading these files and moving them into position.

### Using Attach to Running Container

To enable VSCode integration you'll need to create additional 'mount points' ('locations' on *your computer's* file system) that the Docker image can access. At this point the command becomes *very* long, which is why there is a script designed to make this a more straightforward process provided below.

```bash
docker run --rm -d --name {{< var env.name >}} \
  -p 8888:8888 -p 4201:4201 -p 8787:8787 \
  -v "$(pwd):/home/jovyan/work" \
  -v "${HOME}/.vscode/containers/{{< var env.name >}}-extensions:/home/jovyan/.vscode-server/extensions" \
  -v "${HOME}/.vscode/containers/{{< var env.name >}}-insiders:/home/jovyan/.vscode-server-insiders" \
  {{< var env.image >}} jupyter lab --LabApp.password='' --ServerApp.password='' --NotebookApp.token=''
```

#### Required Extensions

This then enables you to install the required integration extensions as follows:

1. The [Dev - Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension from Microsoft, which will allow you to use a Docker container as a virtual environment from VSCode.
2. The [Docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) extension from Microsoft, which allows you to interact with images/containers from within VSCode.
3. The [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) exension, which will allow you to execute Jupyter Notebooks directly within VSCode.
4. The [Jupyter Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers) extension which adds support for media outputs, especially interactive ones.
5. The [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension which works as a language server (will do code highlighting, syntax checking, etc.) for Python.
6. The [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension which provides rich support for Python >= 3.7.
7. The [Gremlins Tracker](https://marketplace.visualstudio.com/items?itemName=nhoizey.gremlins) extension which highlights non-printing characters that can make code fail to execute properly.

:::{.callout-tip} 
## Jupyter Keymap Extension

The "Jupyter Keymap" exension which provides the same keymaps in VSCode that exist in JupyterLab is globally enabled and does not need to be installed..
:::

You can supplement these with the Markdown linting extension and a range of other tools. 

Once this is all installed, you start up your Docker container (as above) and then tell VSCode to connect to that container using the instructions provided. 

Once you've gone through this _once_ it should be fairly straightforward on subsequent runs. At that point you can browse to the notebooks (which are usually being mounted from your own machine) and run them as if you were doing all of this within the Docker container. It's kind of mind-melting but pretty cool.

#### Connect

Use the Remote Containers icon (![Dev Containers icon](./img/01-icon.png){height="14px" .nolightbox}) to bring up the 'open' menu.

![The Remote Containers Dialogue](./img/01-Connect.png){width="75%" fig-alt="Click the green icon at the bottom-left corner of VSCode" group="vscode"}

#### Attach

Choose the `Attach to Running Container...` option to list active Docker containers.

![Attach to a running container](./img/02-Attach.png){width="75%" fig-alt="Select a running container. Ideally the one you want to use VSCode with!" group="vscode"}

We're only running one container named `fsds` built from the `jreades/sds:2022` image. Your container may have a different name (e.g. `{{< var env.name >}}`) but the *image* should be named `{{< var env.image >}}`:

![The list of running containers](./img/02-container.png){.nolightbox}

#### Attached!

If all has gone well, then a new window should open and you'll notice one small, but significant change:

![An attached workspace](./img/03-Attached.png){width="75%" fig-alt="Notice the Remote Container icon has changed at the bottom." group="vscode"}

VSCode confirms that this window is now connected to the `fsds` container^[Remember that your container may be called something else, like `{{< var env.name >}}`, but that doesn't matter so long as you are using the right image (e.g. `{{< var env.image >}}`). You can name the container *anything* at start-up using `--name <your_chosen_name>` and if you don't provide one then Docker will make one up.]:

![Running on a Container](./img/03-running.png){.nolightbox}

#### Open Sesame

Now, if we try to open a file/folder under the open menu (![Open menu](./img/04-menu.png){height="16px" .nolightbox}), you'll notice that we're not browsing 'our computer' any more! Instead, we're browsing files on the Docker container.

![Opening files on the container](./img/04-Open_Folder.png){width="75%" fig-alt="You will almost always find what you need under /home/jovyan/work" group="vscode"}

So how do we find the notebooks? Well, when we launched the container we had this line:

```bash
  -v "$(pwd):/home/jovyan/work" \
``` 

That told Docker to connect the _current working directory_ (where you ran the command) to `/home/jovyan/work` on the container. So anything under `/home/jovyan/work` is _actually_ a file that can be found on our computer. Below, you can see that I've browsed to the `fsds/practicals` directory on my computer and am now ready to start running (and editing) my notebooks using an IDE instead of JupyterLab's web interface:

![Notice the path on the container](./img/04-path.png){.nolightbox}

#### Extensions

You need to install the _same_ VSCode extensions that you'd use when running Python locally on your computer into the 'remote' container. VSCode will do a pretty good job prompting you, but you've got the [list above](#required-extensions) and can also seem them (notice I've selected `CONTAINER`) on the left-hand `Extensions` (![Extensions menu](./img/05-menu.png){height="16px" .nolightbox}) menu in the screenshot below:

![Extensions installed in Container](./img/05-Extensions.png){width="75%" fig-alt="All being well you should only need to install these once." group="vscode"}

Once the extensions are installed, provided that you use the *same* startup command each time (and don't change the name of the container from `fsds`) those extensions should be ready-to-go and you won't need to reinstall again.

#### Success!

And here we go...

![Running code in a container](./img/06-Success.png){width="75%" fig-alt="Success! Running code in a remote container via VSCode" group="vscode"}


## Deleting the Image

:::{.callout-warning}
## Optional Topic

This next section is _only_ if you want to remove all traces of the Docker images from your computer (e.g. to free up space or diagnose a potential versioning issue).

:::

Should you wish to remove the image and container from your system completely at the end of Term 1 then the following approaches are available:

### Deleting by Filter

This should be used with some care since it will try to delete all matching images and this may not be what you want:

```bash
docker ps -aqf "name=sds" --format="{{.Image}} {{.Names}} {{.ID}}" | grep "2019" | cut -d' ' -f3 | xargs docker rm -f
docker images --format="{{.Repository}} {{.Tag}} {{.ID}}" | grep "sds" | cut -d' ' -f3 | xargs docker rmi
```

### Deleting by Image

```bash
docker ps -aq # Get list of running processes and work out container IDs to remove
docker rm -f <list of container IDs>
docker images # Get list of available images and work out image IDs to remove
docker rmi -f <list of image IDs>
```

## Citing

This draws on Dani Arribas-Bel's work for Liverpool. If you use this, you should also credit him.

[![DOI](https://zenodo.org/badge/65582539.svg)](https://zenodo.org/badge/latestdoi/65582539)

```bibtex
@software{hadoop,
  author = {{Dani Arribas-Bel}},
  title = {\texttt{gds_env}: A containerised platform for Geographic Data Science},
  url = {https://github.com/darribas/gds_env},
  version = {3.0},
  date = {2019-08-06},
}
```
