---
title: "Using Docker"
author: "Jon Reades"
date: "9/9/2022"
---

You will need [Docker](https://www.docker.com) (Desktop) to be able to install the Spatial Data Science (SDS) environment. If you do not wish to create an account with Docker then you may want to follow advice [provided here](https://github.com/docker/docker.github.io/issues/6910#issuecomment-532393783) though we cannot condone it.

One new-ish option is to include a VS-Code server with the Docker image (as an alternative to Jupyter) as outlined [here](https://github.com/ruanbekker/dockerfiles/tree/master/vscode). However, VSCode can also support a more limited integration with Docker more directly provided that you configure the VSCode exceptions correctly (see below).

## Installing

You can then install this container by opening up a Shell/Terminal and simply running:

```bash
docker pull {{< var env.image >}}
```

**Note**: if you want to use something other than `{{< var env.image >}}` you can see the list of available images here: [hub.docker.com/repository/docker/jreades/sds](https://hub.docker.com/repository/docker/jreades/sds)


## Running Jupyter Only

:::{.callout-important}
## M1/M2 Macs

If you are using a M1 Mac then you may need to add `--platform linux/amd64` option to the run commands below. I don't know if this will work as I don't have a M1 Mac to test.
:::

The basic command to launch the programming environment is:

```bash
docker run --name {{< var env.name >}} --rm -ti -p 8888:8888 -v "$(pwd):/home/jovyan/work" \
    {{< var env.image >}} jupyter lab --LabApp.password='' --ServerApp.password=''
```

**Note**: the `pwd` in the command above means use the _current_ directory. So if you simply open a Terminal, Git Bash, or Command Prompt then Docker will 'mount' (_i.e._ make visible to the programming environment) the current directory as `work` in the programming environment. This is most likely to be your home directory and means that _everything_ in your home directory is potentially delete-able or write-able and *that* is a major security risk. 

I would _strongly_ suggest that you `cd` (Change Directory) to a sub-folder along the lines of `./Documents/code/` so that you have the link `work <-> code` between the virtual machine that Docker is running and your computer (which is the 'host'). Obviously, this assumes that you've created a `code` directory in your Documents folder and you can revise according to what you have done instead!

Anyway, assuming that you have run the command above exactly as explained, then you will then be able to point your browser to [localhost:8888](localhost:8888/lab?). You are likely to be prompted to enter a **Password**. This password is currently `casa2021`.

A couple of notes on the command above:

- This opens the `8888` port of the container, so to access the Lab instance,
  you will have to point your browser to [`localhost:8888`](localhost:8888/lab/) Note that there is no space between `localhost` and `8888`, just a colon (`:`).
- The command also mounts the current folder (`pwd`) for the container, but you can replace that with the path to any folder on your local machine; for instance, on a Mac you could use something like `-v "/Users/<your username>/Documents/git/i2p:/home/jovyan/work"` instead and then this would _always_ link the `i2p` folder to `work` in the programming environment; however, I'd suggest that you wait until you understand how paths work before attempting to change this).
- The `name` ensures that you don't accidentally run three versions of the same Docker image!

## Running Dask and/or Quarto

To run Dask and Quarto you need to 'open up' other ports on the Docker image:

```bash
docker run --name {{< var env.name >}} --rm -ti \
  -p 8888:8888 -p 4201:4201 -p 8787:8787 \
  -v "$(pwd):/home/jovyan/work" \
  {{< var env.image >}} jupyter lab --LabApp.password='' --ServerApp.password=''
```

You will then need to ensure that Quarto runs on *the same port* when you start it in Docker:

```bash
quarto preview --host 0.0.0.0 --port 4201
```

Notice the everything to do with Quarto is on port `4201`, but note additionaly the `--host 0.0.0.0` that is required to allow you to view Quarto's output (if you want to serve a web site, for instance, instead of static content) from *outside* the Docker container.

The Dask port is where the Dask task manager will be visible when you are making full use of its multiprocessing features within the Docker container (e.g. using four cores at once where you've enabled this is Docker preferences on your [Mac](https://docs.docker.com/desktop/settings/mac/) or [Windows](https://docs.docker.com/desktop/settings/windows/) machined).

## Enabling VSCode Integration

To enable VSCode integration you'll need to create additional 'mount points' ('locations' on *your computer's* file system) that the Docker image can access. At this point the command becomes *very* long, which is why there is a script designed to make this a more straightforward process provided below.

```bash
docker run --rm -d --name {{< var env.name >}} \
  -p 8888:8888 -p 4201:4201 -p 8787:8787 \
  -v "$(pwd):/home/jovyan/work" \
  -v "${HOME}/.vscode/containers/{{< var env.name >}}-extensions:/home/jovyan/.vscode-server/extensions" \
  -v "${HOME}/.vscode/containers/{{< var env.name >}}-insiders:/home/jovyan/.vscode-server-insiders" \
  {{< var env.image >}} jupyter lab --LabApp.password='' --ServerApp.password=''
```

This then enables you to install the required integration extensions as follows:

1. The [Remote - Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension from Microsoft, which will allow you to use a Docker container as a virtual environment from VSCode.
2. The [Docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) extension from Microsoft, which allows you to interact with images/containers from within VSCode.
3. The [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) exension, which will allow you to execute Jupyter Notebooks directly within VSCode.
4. The [Jupyter Renderers](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter-renderers) extension which adds support for media outputs, especially interactive ones.
5. The "Jupyter Keymap" exension which provides the same keymaps in VSCode that exist in JupyterLab.
6. The [Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) extension which works as a language server (will do code highlighting, syntax checking, etc.) for Python.
7. The [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python) extension which provides rich support for Python >= 3.7.
8. The [Gremlins Tracker](https://marketplace.visualstudio.com/items?itemName=nhoizey.gremlins) extension which highlights non-printing characters that can make code fail to execute properly.

You can supplement these with the Markdown linting extension and a range of other tools. 

Once this is all installed, you start up your Docker container (as above) and then tell VSCode to connect to that container using the instructions provided. 

Once you've gone through this _once_ it should be fairly straightforward on subsequent runs. At that point you can browse to the notebooks (which are usually being mounted from your own machine) and run them as if you were doing all of this within the Docker container. It's kind of mind-melting but pretty cool.

## Running Everything (Script)

In order to be able to access all of the services (persistent VS Code extensions, Quarto, Dask...) it's easier to make use of the [Bash script provided](https://github.com/jreades/sds_env/blob/master/docker/docker.sh) together with the default [configuration file](https://github.com/jreades/sds_env/blob/master/docker/config.sh). This allows you to turn Quarto and Dask on/off by commenting/uncommenting a port number in the `config.sh` file and streamlines the Docker launch process to: `bash docker.sh start`.

The shutdown process (which will shutdown the container and then delete it) is: `bash docker.sh stop`.

#### Deleting

Should you wish to remove the image and container from your system then the following approaches are available:

##### Deleting by Filter

This should be used with some care since it will try to delete all matching images and this may not be what you want:

```bash
docker ps -aqf "name=sds" --format="{{.Image}} {{.Names}} {{.ID}}" | grep "2019" | cut -d' ' -f3 | xargs docker rm -f
docker images --format="{{.Repository}} {{.Tag}} {{.ID}}" | grep "sds" | cut -d' ' -f3 | xargs docker rmi
```

##### Deleting by Image

```bash
docker ps -aq # Get list of running processes and work out container IDs to remove
docker rm -f <list of container IDs>
docker images # Get list of available images and work out image IDs to remove
docker rmi -f <list of image IDs>
```

## Citing

This draws on Dani Arribas-Bel's work for Liverpool. If you use this, you should also credit him.

[![DOI](https://zenodo.org/badge/65582539.svg)](https://zenodo.org/badge/latestdoi/65582539)

```bibtex
@software{hadoop,
  author = {{Dani Arribas-Bel}},
  title = {\texttt{gds_env}: A containerised platform for Geographic Data Science},
  url = {https://github.com/darribas/gds_env},
  version = {3.0},
  date = {2019-08-06},
}
```
