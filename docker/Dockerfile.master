# syntax = edrevo/dockerfile-plus
# To make the above work, you need to add 
# `export DOCKER_BUILDKIT=1` (without the back-tics)
# to your .rc (.zshrc/.bashrc) file. This is *only*
# needed when building from source. Otherwise just pull
# as below.

# How to pull and run this image:
# > export IMG_NM=sds:XXXX (where XXXX is the version you wish to run)
# > docker pull jreades/${IMG_NM}
# > docker run --rm -ti -p 8888:8888 -v ${PWD}:/home/jovyan/work jreades/${IMG_NM} start.sh jupyter lab (see also the docker.sh script)

#--- Build from Jupyter-provided Minimal Install ---#
# https://github.com/jupyter/docker-stacks/blob/master/docs/using/selecting.md
# Mid-June 2022
FROM jupyter/scipy-notebook:lab-3.4.3

LABEL maintainer="j.reades@ucl.ac.uk"

ENV env_nm 'sds2022'
ENV kernel_nm 'SDS2022'
ENV yaml_nm 'conda.install.yml'
ENV pip_nm 'pip.install.txt'
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

#--- Python ---#
INCLUDE+ ./docker/Dockerfile.python.install

ENV PATH /opt/conda/bin:$PATH
ENV PROJ_LIB /opt/conda/share/proj/

#--- JupyterLab config ---#
USER root

INCLUDE+ ./docker/Dockerfile.jupyterlab.extensions

# Fix permissions
RUN fix-permissions $CONDA_DIR \
    && fix-permissions $HOME

#--- Quarto ---#
ENV TEMP_DEB="quarto.deb"
RUN apt-get update && apt-get install -y --no-install-recommends \
    texlive-fonts-recommended \
    lmodern \
    pandoc \
    pandoc-citeproc \
    curl \
    gdebi-core \
    && rm -rf /var/lib/apt/lists/*

RUN curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb
RUN gdebi --non-interactive quarto-linux-amd64.deb
RUN rm quarto-linux-amd64.deb

#--- Configure startup params ---#
# Switch back to user to avoid accidental container runs as root
USER $NB_UID

# VSCode Extension Folder (optional usage)
ARG USERNAME='jovyan'

RUN mkdir -p /home/$USERNAME/.vscode-server/extensions \
             /home/$USERNAME/.vscode-server-insiders/extensions \
    && chown -R $USERNAME \ 
             /home/$USERNAME/.vscode-server \
             /home/$USERNAME/.vscode-server-insiders

#--- Install some fonts ---#
ARG GFONTS='https://fonts.google.com/download'
ARG SPECTRAL='Spectral'
ARG SPECTRAL_SC='Spectral%20SC'
ARG ROBOTO='Roboto'
ARG JETBRAINS='JetBrains%20Mono'

RUN echo $HOME
RUN mkdir -p $HOME/.local/share/fonts/ \
&& curl -L "${GFONTS}?family=${ROBOTO}" --output $ROBOTO.zip \
  && unzip -o $ROBOTO.zip \
  && mv *.ttf $HOME/.local/share/fonts/ \
  && rm $ROBOTO.zip \
&& curl -L "${GFONTS}?family=${SPECTRAL}" --output $SPECTRAL.zip \
  && unzip -o $SPECTRAL.zip \
  && mv *.ttf $HOME/.local/share/fonts/ \
  && rm $SPECTRAL.zip \
&& curl -L "${GFONTS}?family=${SPECTRAL_SC}" --output $SPECTRAL_SC.zip \
  && unzip -o $SPECTRAL_SC.zip \
  && mv *.ttf $HOME/.local/share/fonts/ \
  && rm $SPECTRAL_SC.zip \
&& curl -L "${GFONTS}?family=${JETBRAINS}" --output $JETBRAINS.zip \
  && unzip -o $JETBRAINS.zip \
  && mv *.ttf $HOME/.local/share/fonts/ \
  && rm $JETBRAINS.zip \
&& chown -R $USERNAME .local/share/fonts

# Should rebuild the font manager and allow us to access
# the fonts we've just added in Matplotlib... *should*
RUN /opt/conda/bin/python -c "import matplotlib.font_manager;"

# And this is how to check what's been installed in the system:
# grep '"name"' ~/.cache/matplotlib/fontlist-v330.json | sort | uniq

#--- Make Proj4 Easy to Find ---#
# Change depending on whether using base environment
RUN echo "export PROJ_LIB=/opt/conda/share/proj/" >> ~/.bashrc
#RUN echo "export PROJ_LIB=/opt/conda/envs/${env_nm}/share/proj/" >> ~/.bashrc
