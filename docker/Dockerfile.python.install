USER root

#RUN conda install --freeze-installed --yes mamba \
#    && conda config --add channels conda-forge \
#    && conda config --add channels pyviz \
#    && conda config --set channel_priority strict

ADD ./conda/${yaml_nm} ./

RUN mamba env create -n $env_nm --quiet --file ${yaml_nm} \
    #RUN mamba env update -n base --quiet --file ${yaml_nm} \
    && source activate $env_nm \
    && python -m ipykernel install --user --name $env_nm --display-name "$env_nm" \
    && conda deactivate \
    && conda clean --all --yes --force-pkgs-dirs \
    && jupyter kernelspec remove -y python3 \
    && find /opt/conda/ -follow -type f -name '*.a' -delete \
    && find /opt/conda/ -follow -type f -name '*.pyc' -delete \
    && find /opt/conda/ -follow -type f -name '*.js.map' -delete \
    #&& find "/opt/conda/${env_path}/lib/python*/site-packages/bokeh/server/static" \
    #   -follow -type f -name '*.js' ! -name '*.min.js' -delete \
    && pip cache purge \  
    && rm ${yaml_nm} \
    # Fix permissions
    && fix-permissions $CONDA_DIR \
    && fix-permissions /home/$NB_USER

USER $NB_UID

RUN jupyter lab --generate-config \
    && echo "c.MultiKernelManager.default_kernel_name='${env_nm}'" >> \
       /home/$NB_USER/.jupyter/jupyter_lab_config.py \
    && echo "c.KernelSpecManager.ensure_native_kernel = False" >> \
        /home/$NB_USER/.jupyter/jupyter_lab_config.py \
   # https://github.com/jupyter/notebook/issues/3674#issuecomment-397212982
    && echo "c.KernelSpecManager.whitelist = {'$env_nm'}" >> \
        /home/$NB_USER/.jupyter/jupyter_lab_config.py \
    && echo "conda activate $env_nm" >> /home/$NB_USER/.bashrc

# Set up code formatting cache
USER $NB_UID

#--- Preload the NLTK/Spacy libs ---#
ENV GENSIM_DATA_DIR=/home/NB_USER/work/gensim-data
ENV SPACY_DATA_DIR=/home/NB_USER/work/spacy-data
ENV XDG_CACHE_HOME=/home/$NB_USER/.cache/

RUN echo "export GENSIM_DATA_DIR=$GENSIM_DATA_DIR # python -m gensim.downloader --download <dataname>" >> ~/.bashrc 
RUN echo "export SPACY_DATA_DIR=$SPACY_DATA_DIR # spacy.load('/path/to/en_core_web_sm')" >> ~/.bashrc 
RUN echo "export PATH=/opt/conda/$env_path/bin/:${PATH}" >> ~/.bashrc 
RUN echo "export XDG_CACHE_HOME=$XDG_CACHE_HOME" >> ~/.bashrc

#RUN echo $(find /opt/conda/${env_path}lib -name "black.py") 

# This bloats the Docker image but not massively
# Should rebuild the font manager and allow us to access
# the fonts we've just added in Matplotlib... *should*
RUN source activate ${env_nm} \
    && mkdir -p "/home/$NB_USER/.cache/black/$(black --version | cut -d ' ' -f 3)" \
    && black $(find /opt/conda/${env_path}lib -name "black.py") --code "print ( 'hello, world' )" \
    && MPLBACKEND=Agg python -c "import matplotlib.pyplot" \
    && python -c "import matplotlib.font_manager;" \
    && python -c "import logging; logging.basicConfig(level='INFO'); import black" \
    && python -c "import nltk; nltk.download('wordnet'); nltk.download('stopwords'); nltk.download('punkt'); nltk.download('city_database'); nltk.download('averaged_perceptron_tagger'); nltk.download('omw-1.4')" \
    && python -c "import duckdb; db = duckdb.connect(); db.execute('INSTALL spatial'); db.execute('INSTALL httpfs'); db.execute('LOAD spatial; LOAD httpfs;');"

# This bloats the Docker image massively
# RUN python -m spacy download en_core_web_sm

#--- Tidy and fix permissions ---#
USER $NB_UID

# Disable message
RUN jupyter labextension disable "@jupyterlab/apputils-extension:announcements" \
    # Clean up
    && jupyter lab clean -y \
    && conda clean --all -f -y \
    && npm cache clean --force \
    && rm -rf $CONDA_DIR/share/jupyter/lab/staging \
    && rm -rf /home/$NB_USER/.node-gyp/* \
    && rm -rf /home/$NB_USER/.local/* \
    && rm -rf /home/$NB_USER/.cache/rosetta \
    && rm -rf /home/$NB_USER/.cache/yarn \ 
    && rm -rf /home/$NB_USER/.cache/pip

#--- Make Proj4 Easy to Find ---#
# Change depending on whether using base environment
ENV PROJ_LIB /opt/conda/${env_path}share/proj/
RUN echo "export PROJ_LIB=${PROJ_LIB}" >> ~/.bashrc