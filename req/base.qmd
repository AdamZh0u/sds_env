---
title: "Base Utilities"
author: "Jon Reades"
date: "9/9/2022"
---

In order to access the majority of the features that this module uses, you will need to install several 'base' utilities:

::: {.panel-tabset}

## MacOS

You will need to install the following:

1. The Xcode Command Line Tools, which can usually be installed [directly from the Terminal](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/). If that does not work for you, then you can use the [Apple Developer website](https://developer.apple.com/download/all/) to download and install manually. *Note*: this may require you to get a free developer account.
2. Although not strictly necessary, you'll *eventually* want the Homebrew package manager, which can also be installed [directly from the Terminal](https://phoenixnap.com/kb/install-homebrew-on-mac). 

## Windows

You will need to install WSL2:

1. There is good guidance [from Microsoft](https://learn.microsoft.com/en-us/windows/wsl/install) for Windows 11 and more recent 'builds' of Windows 10.
1. There are also [older instructions](https://www.digitalocean.com/community/tutorials/how-to-install-the-windows-subsystem-for-linux-2-on-microsoft-windows-10) for Windows 10.

::: {.callout-warning}
## Creating a Linux User

When installing WSL2 make sure you set up a *new `Linux` user* and do not end up running everything as `root`.
:::

Once WSL2 is installed, you will need to familiarise yourself with how having two operating systems that can talk to each other works. That is covered in the next section. This will actually be *useful* for understanding how Docker works, but can be profoundly confusing. 

Common installation errors are [covered here](https://learn.microsoft.com/en-us/windows/wsl/troubleshooting?source=recommendations).

Finally, if you are *still* being told that you can't install WSL2 and Linux, then the most likely cause of this issue is a setting in the BIOS of the computer itself. There are a couple of settings that need changing at a very low level to enable Hyper-V virtualisation. I would start by following [this MS guide](https://learn.microsoft.com/en-us/windows/wsl/install-manual) and, if there is still a problem, check [this blog post](https://s1gr1d.medium.com/how-to-set-up-linux-on-windows-with-wsl-2-debe2a64d20d).

:::

## Windows + Linux + Shell

The behaviour of the 'shell' (command line) is quite confusing because, with WSL2, you effectively end up with two 'home' directories: one for your Windows user, and one for your new Ubuntu user. Starting a Linux shell/command line puts you in your Linux home directory (the username may be completely different from your Windows username). Starting a Windows shell/command line puts you in your Windows home directory (again, the username may be completely different from your Linux username).

So the first, and perhaps most important, thing is [understanding where 'data' is being stored](https://learn.microsoft.com/en-us/windows/wsl/filesystems?source=recommendations):

- Under Linux the user directory is apparently something like: `\\wsl$\<DistroName>\home\<UserName>\` but you can usually get it by simply typing `cd $HOME` and then `pwd` when starting a new *Linux* shell.
- Under Windows the user directory is: `C:\Users\<UserName>\` or `/mnt/c/Users/<UserName>/`, and you can often simply type `pwd` when opening a new *Windows* shell.

So these are *different* locations on your computer's hard drive, and you will not see your Linux files in your Windows Home Directory and vice versa. To make it easy to switch between the two, I found [this page on Microsoftâ€™s web site](https://learn.microsoft.com/en-us/windows/wsl/setup/environment#set-up-windows-terminal) that goes through some of the post-WSL2 installation steps, but see especially the additional page on [Windows Terminal configuration](https://learn.microsoft.com/en-us/windows/terminal/install).

Slightly confusingly, you *can* [run Linux commands directly from Windows](https://learn.microsoft.com/en-us/windows/wsl/filesystems?source=recommendations#interoperability-between-windows-and-linux-commands), usually be adding `wsl` in front of the Linux command (e.g. `wsl ls *.csv` from Windows, where in Linux the command would be `ls *.csv`).

To make it easy to move from the Linux side of your machine to the Windows machine you can *also* do this:

1. Work out where your CASA files are stored on the Windows side (see above: `/mnt/c/Users/<UserName>/My\ Documents/CASA/...` where `<UserName>` is your Windows user name).
2. `cd` to this location and type `pwd` to output the full path to the CASA directory.
3. Copy this.
4. Now start a *Linux* shell and run the following command *once* (you do not need to do it ever again): `echo "export WIN_HOME=\"/mnt/c/Users/.../CASA/\"" >> $HOME/.bashrc`. Replace the `...` with the rest of the actual path! The `\"` is very important, don't try to change those!
5. Now run `source .bashrc` and you should see no errors.

Once you have done this you will have added a single line to your `.bashrc` file in Linux. This will create a 'shortcut' for bash in Linux. From here on out you *should* be able to type `cd $WIN_HOME` and move immediately over to the `CASA` directory on the Windows side. This will save having to remember (and type) the Windows path each time.

