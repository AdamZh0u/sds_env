[
  {
    "objectID": "conda/index.html",
    "href": "conda/index.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "You are strongly encouraged to use the Docker image instead of installing Anaconda Python directly. The basic reason for this is that you may encounter installation errors or version differences that mean your experience of running the Spatial Data Science environment is seriously impaired.\nIf you persist in wanting to install natively, then you will need Anaconda Python (Python 3) to be able to install the programming environment.\n\n\nYou are strongly encouraged to use the Docker image instead of installing Anaconda Python directly. The basic reason for this is that you may encounter installation errors or version differences that mean your experience of running the Spatial Data Science environment is seriously impaired. Furethermore, we are not in a position to provide support for the wide variety of platforms (hardware and software) that students may present.\n\n\nIf you really want to install natively, despite everything we said above, then you will need Anaconda Python (Python 3 64-bit) to be able to install the programming environment.\n\n\nIf you are using Mac OS, you can download Anaconda directly from here and then install it.\n\n\n\nIf you are using Windows 10 or 11, things are a bit trickier. Using Anaconda on Windows is not pleasant, as many packages are only available for Unix/Linux, which makes it hard to configure the Anaconda environment. Moreover, using the Windows CMD or powershell or Anaconda prompt is unpleasant. Therefore, we recommend using Miniconda for WSL (Windows Subsystem for Linux) on your Windows machine.\nThe installation of Miniconda for WSL consists of the following steps:\n\nInstall WSL (Ubuntu for Windows) and Windows Terminal on Windows, following this link.\nStart a Windows Terminal of Ubuntu. Note that all following steps are on Windows Terminal instead of CMD or Anaconda prompt.\nGo to https://repo.anaconda.com/miniconda/ to find the list of Miniconda releases. Select the latest release for your machine. I have a 64-bit x86 computer, so I choose Miniconda3-latest-Linux-x86_64.sh. If you have a 32-bit computer, you would select Miniconda3-latest-Linux-x86.sh.\nFrom the terminal run wget https://repo.anaconda.com/miniconda/[YOUR VERSION]. Example: wget  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh.\nRun the installation script: bash Miniconda3-latest-Linux-x86_64.sh. Replace the file name of .sh if needed.\nRead the license agreement and follow the prompts to accept. When asks you if you’d like the installer to prepend it to the path, say yes.\nReload the .bash configs so WSL knows where the conda is installed: source ~/.bashrc. Mine is /home/user_name/anaconda3/bin/python. If it doesn’t have anaconda in the path, do the next step. Otherwise, skip the next step.\nManually add the Anaconda bin folder to your PATH. To do this, I added “export PATH=/home/user_name/anaconda3/bin:$PATH” to the bottom of my ~/.bashrc file. Do replace user_name with your username.\n\nNote: Miniconda is a free minimal installer for conda. It is a lighter version of Anaconda and makes configuring a new environment easy.\nNote: if you have installed Anaconda for Windows, you don’t need to uninstall it before installing conda for WSL. These two pieces are separate.\n\n\n\n\nAfter downloading and installing Anaconda Python you will also need to download the environment’s configuration file. This file (known as a ‘YAML file’) tells Anaconda Python what versions of what libraries to install on your computer. The idea is that all users end up with the same versions of the key programming libraries.\nYou will then need to work out how to use the Terminal (Mac in order to navigate to the folder holding the downloaded configuration file. It will be something like cd ~/Downloads/ to reach your downloads folder.\nAt this point you may start the installation by typing:\nconda-env create -n sds2021 -f environment_py.yml\nAnd then hit the return key to run the command.\n\n\n\nTo make this new ‘configuration’ visible in JupyterLab you then need to run the following two commands…\nconda activate sds2021\npython -m ipykernel install --name sds2021 --display-name \"CASA2021\"\nNote: when you connect to Jupyter, you should see a second tile called CASA2021. Users of Docker will see only Python3. You should always use the CASA2021 tile (which represents a separate computing environment) in Anaconda instead of the default Python3 tile.\nNote: if you get a warning of ‘No permission’ because of the above commands, please add sudo to that command and run it again. You would need to input the password for WSL or Mac.\n\n\n\nStill using the Terminal type (Windows users, please use Windows Terminal):\nconda activate sds2021\njupyter lab\nDo not run Jupyter Lab from the Anaconda Navigator since it does not configure the spatial analysis libraries correctly.\n\n\n\nAfter downloading and installing Anaconda Python you will also need to download the environment’s configuration file. This file (known as a ‘YAML file’) tells Anaconda Python what versions of what libraries to install on your computer. The idea is that all users (whether using our Docker approach or this one) end up with (roughly) the same versions of the key programming libraries.\nYou will then need to work out how to use the AnacondaPrompt (Windows) or Terminal (Mac) in order to navigate to the folder holding the downloaded configuration file. It will be something like cd ~/Downloads/ to reach your downloads folder.\nAt this point you may start the installation by typing:\nconda-env create -n {{<var env.name>}} -f environment_py.yml\nAnd then hit the return key to run the command.\n\n\n\nTo make this new ‘configuration’ visible in JupyterLab you then need to run the following two commands…\nconda activate {{<var env.name>}}\npython -m ipykernel install --name {{<var env.name>}} --display-name \"{{<var env.display>}}\" \nNote: when you connect to Jupyter, you should see a second ‘tile’ with the display name set above (e.g. {{<var env.display>}}. Users of Docker will see only Python3. You should always use the {{<var env.display>}} tile (which represents a separate computing environment) in Anaconda instead of the default Python3 tile, which does not have the necessary libraries installed.\n\n\n\nStill using the Terminal/AnacondaPrompt type:\nconda activate {{<var env.display>}}\njupyter lab\nDo not run Jupyter Lab from the Anaconda Navigator since it does not configure the spatial analysis libraries correctly.\n\n\n\n\nThis draws heavily on Dani Arribas-Bel’s work for Liverpool. If you use this, you should cite him.\n\n\n\nDOI\n\n\n@software{hadoop,\n  author = {{Dani Arribas-Bel}},\n  title = {\\texttt{gds_env}: A containerised platform for Geographic Data Science},\n  url = {https://github.com/darribas/gds_env},\n  version = {3.0},\n  date = {2019-08-06},\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "In order to get you started on your spatial and data science ‘journey’ you will need to follow the guidance provided on the pages we’ve linked to below. These are divided into three sections:\n\n\nBefore trying to do anything else you should review the ‘requirements’. As part of that, you’ll need to complete the basic health check, which also includes our recommendations if you are considering buying a new computer when you start your studies. Once you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment. We also provide information about Code Camp which is a self-paced introduction to the fundamentals of programming in Python.\n\n\n\nInstalling the computing environment entails thinking not just about how you run code, but also how you manage it and document it. In fact, it’s possible to run code without installing anything at all, but by signing up for, installing, or configuring these services now you know that you are ready to roll!\n\n\n\nIt might seem strange to have a section on soft-skills as part of our ’preparing to run the Urban Spatial Science platform web site, but knowing how to ask for help and how to study effectively is almost as important as being able to run the code. Almost. Moreover, the skills we discuss here aren’t specific to any one module so we’ve put them here as part of your orientation.\n\n\n\nNone outstanding.\n\n\n\nThis draws heavily on Dani Arribas-Bel’s work for Liverpool. If you use this, you should cite him.\n\n\n\nDOI\n\n\n@software{hadoop,\n  author = {{Dani Arribas-Bel}},\n  title = {\\texttt{gds_env}: A containerised platform for Geographic Data Science},\n  url = {https://github.com/darribas/gds_env},\n  version = {3.0},\n  date = {2019-08-06},\n}"
  },
  {
    "objectID": "jupyter_hub.html",
    "href": "jupyter_hub.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Start up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using UCL credentials.\nCreate a new terminal: File > New > Terminal\n\n\n\nI now think that these instructions are not correct (see below for the alternative) in the sense the use of a symlink can cause problems and duplicated environments down the line. Anyway, type the following, but note that you need to replace ... with the appropriate path (this will be obvious logged in):\ncourse_name=\"{{<var module.code>}}\"\n\nln -s /shared/.../casa/${course_name} $HOME/${course_name}\n\nconda config --add envs_dirs /shared/groups/.../casa/${course_name}/envs\n\ncurl -o /tmp/{{<var module.code>}}.yml https://raw.githubusercontent.com/jreades/sds_env/master/conda/environment_py.yml\n\nconda env create -n {{<var module.code>}} -f /tmp/{{<var module.code>}}.yml\n\n\n\nI now think that the correct way to do this is:\ncourse_name=\"{{<var module.code>}}\"\n\nconda config --add envs_dirs /shared/groups/.../casa/envs\n\ncurl -o /tmp/{{<var module.code>}}.yml https://raw.githubusercontent.com/jreades/sds_env/master/conda/environment_py.yml\n\nconda env create -p /shared/groups/.../casa/envs -f /tmp/{{<var module.code>}}.yml\nHowever, note that this now means you have .../casa/{{<var module.code>}}/envs/{{<var module.code>}}... so it might be more sensible to set envs_dirs to just ...casa/envs and then have per-module environments underneath that.\n\n\n\nTwo shortcomings in the existing approach of generating environment_py.yml were identified and need to be tweaked in the Makefile:\n\nRemove anything with ‘linux’ in it\nRemove SOMPY and mrmr\nRemove version from gitpython.\nRemove python-graphviz entirely.\n\nAdditional issues may exist with replication to non-Linux systems.\n\n\n\n\nTo connect to JupyterHub:\n\nStart up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using UCL credentials.\nIf you see a URL that ends in tree? please replace this with lab? to get the JupyterLab interface and not the original Jupyter Notebook interface.\nCreate a new terminal: File > New > Terminal\n\nNote that you need to replace ... with the appropriate path (this will be obvious logged in):\ncourse_name=\"{{<var module.code>}}\"\n\nconda config --append envs_dirs /shared/groups/.../casa/envs\n\njupyter contrib nbextension install --user"
  },
  {
    "objectID": "req/base.html",
    "href": "req/base.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "In order to access the majority of the features that this module uses, you will need to install several ‘base’ utilities:\n\n\nYou will need to install the following:\n\nThe Xcode Command Line Tools, which can usually be installed directly from the Terminal. If that does not work for you, then you can use the Apple Developer website to download and install manually. Note: this may require you to get a free developer account.\nAlthough not strictly necessary, you’ll eventually want the Homebrew package manager, which can also be installed directly from the Terminal.\n\n\n\n\nYou will need to install the following:\n\nWSL 2, for which you can follow these instructions."
  },
  {
    "objectID": "req/code_camp.html",
    "href": "req/code_camp.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Prior to (re)joining CASA from the Department of Geography at King’s College London, Dr. Mic Ferretti, Dr. Zara Shabrina, Dr. James Millington, and I developed Code Camp.\nCode Camp provides a gentle introduction to the basics of programming in Python. Across ten sessions you will learn about syntax, variables, ‘simple’ data structures such as lists and dictionaries, and about the fundamentals of writing functions for reusable code. The sessions are entirely self-led: you should follow along at your own pace and remember that ‘it’s a marathon, not a sprint’. Don’t cram it all into the last week of summer holidays!\nStudents from previous years have repeatedly said that completing Code Camp helped them to feel more ready for the Foundations of Spatial Data Science module, enabling them to do better on assessments and on the programme as a whole.\nSo please, complete Code Camp by the start of term and, if possible, go through the materials more than once!\nYou should have received instructions via email for running Code Camp, but here they are again…\n\n\nCode Camp is publicly accessible through a code-sharing web site called GitHub and can be run using either:\n\nGoogle’s ‘Collaboratory’, or\nThe Open Source Binder tool.\n\nIn both cases there is nothing to install on your computer. You could even use a tablet or phone, though we wouldn't really recommend it. There are two main differences: ‘Colab’ notebooks require an account but can be saved into Google Drive; Binder does not require any registration, but you won’t be able to save anything.\n\n\n\n\nHow to get started:\n\nGo to Google’s Colab site and sign in using your Google account details (or create an account if you don’t already have one).\nChoose File then Open and select the GitHub tab from the open options (it’s between Google Drive and Upload).\nEnter the following URL: https://github.com/kingsgeocomp/code-camp (Jon was with King’s when he helped to create this resource)\nYou should now see a list of notebooks to choose from – the first few are fairly quick to complete, but they get harder as you go along – select the first on in the sequence and click Open in Colab.\nYou will need to trust the notebook in order to run it.\n\nNow you can run code in your web browser! When you are done for the day you can save the notebook to your Google Drive – to re-run that notebook you can just load it from Google Drive, rather than going back to GitHub, but remember that you need to re-run all the cells up to the point where you saved the notebook. Being able to save and re-run a notebook is the main difference from Binder.\n\n\n\nAll you need to do to get started is click the image below: \nThat’s it! But in case clicking that image doesn’t work, you can also go to: https://bit.ly/33Rc5QD. When Binder starts, you will be able to run the notebooks! The main difference from Colab is that you have to download a notebook from Binder to your local computer in order to save it. To re-run the same notebook, you’d need to upload the notebook to Binder again. So Binder has no ‘memory’ of your work between interactions."
  },
  {
    "objectID": "req/health.html",
    "href": "req/health.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "When answering the questions below, ‘your computer’ is the machine on which you plan to do the programming. You will also have some ability to run code remotely on UCL’s JupyterHub or on Google Collab (see No Install), but you will find that limitations in processing power on these cloud platforms can make this a frustrating experience.\n\n\nWe try to support as many different configurations as possible, but there is no programming environment that installs and runs seamlessly on all computers. However, in our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer 8GB or less of RAM.\nYour computer has less than 20GB of free disk space remaining.\n\nRead on below to check what specification you have…\n\n\nYou will need to look up:\n\nHow much RAM does your main computer have? Help for Mac.\nHow much free disk space does your main computer have? Help for Mac.\n\n\n\n\nYou will need to look up:\n\nHow much RAM does your main computer have? Help for Windows.\nHow much free disk space does your main computer have? Help for Windows.\n\n\n\n\nWe’re going to assume that you know what you’re doing. If you want a recommendation, we’d probably go with the latest Ubuntu desktop release.\n\n\n\nIf you are looking for a recommendation as to what to buy:\n\nDon’t worry about getting the fastest chip, get as much RAM as you can. You should aim for 32GB of RAM, but get more if you can afford it.\nDon’t worry about getting the biggest hard drive, get the fastest one you can. You should get a SSD (Solid State Drive), but get a M2 type SSD if you can afford it and it’s available for your system.\nOnly after you’ve sorted this out should you look for the fastest chipset that’s still within your budget.\n\n\n\nYou should probably stick with whatever you’re familiar with since learning your way around a new Operating System while also learning to code is just raising the bar unnecessarily. Around CASA we use a mix of all three, and you can probably find as many opinions as there are staff members.\n\n\n\nIt depends. Here’s a good article from MacWorld covering the pros and cons. Short answer: right now (June 2022) the M1 is probably faster for most data science applications, but expect that to have changed by June 2023. But either way: a fast chip with not enough RAM will be much slower than a slow chip with abundant RAM.\n\n\n\n\n\n\nSaving Money\n\n\n\nTwo easy things to do to save money on a new machine are:\n\nUnless there is a specific reason to do so (e.g. getting a system with Apple’s M1/M2 chip), don’t buy the latest machine, buy a model from earlier in the year/the previous year instead and upgrade the RAM and hard drive instead.\nOnly buy the machine when you have access to a student discount. The discount for Apple computers is relatively modest (ca. 10%) compared to ‘back to school’ offers for Windows machines, but as the Brits would say: even 10% is better than a kick in the teeth!\n\n\n\n\n\n\n\n\nWe try to support as many different configurations as possible, but there is no programming environment that installs and runs seamlessly on all computers. However, in our experience the students most likely to encounter problems share one or more of the following:\n\nYour computer runs Windows 10 Home or older, or\nYour computer runs MacOS 10.13 (High Sierra) or older.\n\nAs long as your computer is running one of the last two major releases of the Operating System you should encounter few issues.\n\n\nYou will need to look up:\n\nWhat Operating System and Version is your main computer running? Help for Mac.\n\n\n\n\nYou will need to look up:\n\nWhat Operating System and Version is your main computer running? Help for Windows.\n\n\n\n\nIf you are using a Mac then your system should have the option to update to the latest version of the MacOS at no charge. If you are unable to update then it is likely that you have an older machine that is not fully supported by the most recent Operating System and, in all probability, you will also encounter issues running the programming environment.\nIf you are using a Windows PC then try to update to either Windows 11 or to Windows 10 Pro as this will ‘unlock’ additional features that are useful for supporting the programming environment. As a student you are likely to qualify for significantly cheaper/free updates, so make sure you do this when you have access to a discount.\n\n\n\n\nNow that you know your computer is ‘up-to-spec’, please ensure that your computer is fully up-to-date with all Operating System and application updates before following any of the other steps in this brief guide to getting started.\n\n\n\n\n\n\nAutomatic Updates\n\n\n\nOnce you have installed the programming environment we strongly recommend that you turn off automatic updates for your computer until the end of the academic year. This is not to say that you should not install security and other updates over the course of the year, but to emphasise that it should be at a time of your choosing. In previous years, students’ computers have automatically updated to a whole new operating system version two nights before an assessment deadline, breaking existing code and causing lots of needless stress."
  },
  {
    "objectID": "req/index.html",
    "href": "req/index.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Before trying to do anything else please complete the basic health check, which also includes our recommendations if you are considering buying a new computer when you start your studies. Once you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment. We also provide information about Code Camp which is a self-paced introduction to the fundamentals of programming in Python."
  },
  {
    "objectID": "setup/env.html",
    "href": "setup/env.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Over the years, we have experimented with a range of approaches to setting you up with a programming environment, and we have come to the conclusion that Docker is the most robust way to ensure a consistent experience. This guarantees that all students end up with the same versions of each library, that difficult-to-diagnose hardware/OS issues are minimised, and that running/recovery is the most straightforward.\nA very small number of students are unable to run Docker on older machines running Windows 10 Home, in which case Anaconda Python can be used with the configuration file that we provide. However, if your machine runs Docker then you must use Docker: this isolates the programming environment from your computer, ensuring that nothing is clobbered by accident, and guaranteeing that you are working with the same version of every Python library as the rest of the class (and the versions for which the practicals are tested).\nAnaconda is only supported as a last resort.\n\n\nThere are many options for how Docker sets up and runs ‘virtual machines’ (known as ‘images’) on your local system (i.e. the computer on which you’re reading this now!). The jreades/sds:2022 image contains (we hope) all of the tools that you’ll need to get through the majority of our programme when you are working in Python. There are so many options that we actually created a script to do most of it for you; however, this needs to be paired with a configuration file that is in the same folder as the docker.sh script so it’s an extra step to getting up and running.\nThe bare minimum for getting up and running (once you’ve installed Docker) is:\nDOCKER_NM=\"sds2022\"\nDOCKER_IMG=\"jreades/sds:2022\"\nJUPYTER_PORT=8888\nQUARTO_PORT=4200\nWORK_DIR=\"${PWD}\"\nJUPYTER_PWD=\"\"\ndocker run --rm -d --name $DOCKER_NM -p \"$JUPYTER_PORT\":8888 -p \"$QUARTO_PORT\":4200 -v \"$WORK_DIR\":/home/jovyan/work $DOCKER_IMG start.sh jupyter lab --LabApp.password=$JUPYTER_PWD --ServerApp.password=$JUPYTER_PWD --NotebookApp.token=$JUPYTER_PWD\n\n\n\n\n\n\nKnown Windows Issues\n\n\n\nOn Windows, if you cannot see any of the files on your main system when you start up Docker with the SDS image, then please try replacing this part of the Docker command (see details below):\n-v \"$WORK_DIR\":/home/jovyan/work\nwith:\n--mount type=bind,source=\"$(pwd)\",target=/home/jovyan/work\nThis should enable you to see any existing files that you have, while also allowing you to save any files that you create.\n\n\nAs well…\n\n\n\n\n\n\nKnown Mac Issues\n\n\n\nOn Mac, if you are using one of the new M1 or M2 chips on your main system then you need to tell Docker to emulate the older Intel chipset (which is all I have access to!) by changing this part of the Docker run command (see details below):\n--name sds -p 8888:8888\nto:\n--name sds --platform linux/amd64 -p 8888:8888\n\n\n\n\n\nBy default, Docker+JupyterLab enables you to interact with code via a web browser, and we’ve built in many useful tools for a streamlined, effective in-browser experience. However, if you’re more familiar with IDEs then VSCode offers an interesting alternative: after installing VSCode, you’ll also need to install the following extensions:\n\nThe Remote - Containers extension from Microsoft, which will allow you to use a Docker container as a virtual environment from VSCode.\nThe Docker extension from Microsoft, which allows you to interact with images/containers from within VSCode.\nThe Jupyter exension, which will allow you to execute Jupyter Notebooks directly within VSCode.\nThe Jupyter Renderers extension which adds support for media outputs, especially interactive ones.\nThe “Jupyter Keymap” exension which provides the same keymaps in VSCode that exist in JupyterLab.\nThe Pylance extension which works as a language server (will do code highlighting, syntax checking, etc.) for Python.\nThe Python extension which provides rich support for Python >= 3.7.\nThe Gremlins Tracker extension which highlights non-printing characters that can make code fail to execute properly.\n\nYou can supplement these with the Markdown linting extension and a range of other tools.\nOnce this is all installed, you start up your Docker container (as above) and then tell VSCode to connect to that container using the instructions provided. Once you’ve done this once it should be fairly straightforward on subsequent runs. At that point you can browse to the notebooks (which are usually being mounted from your own machine) and run them as if you were doing all of this within the Docker container. It’s kind of mind-melting but pretty cool.\n\n\n\nAgain, we only support Anaconda Python as a fallback for students who would otherwise be unable to complete the module because their computer does not support Docker. You are always free to install Anaconda Python and to use our YAML configuration script to install the SDS environment, but you should do this in your own time: in previous years students have encountered difficult-to-diagnose bugs in their code (and lost marks in the Assessments!) because they had installed an older or more recent version of a Python library than the one configured and tested in the SDS environment.\nWe believe that the replication advantages of virtualisation outweigh the disbenefits in terms of performance. It also means that you will spend less time installing libraries and more time running code, which is where your attention should really be when you are familiarising yourself with the foundations of data science. Eventually you will, of course, want to install and manage your own programming environment (possibly even by building and sharing Docker images!) but this can be left for later when you have developed an appreciation of how and when virtualisation is (or is not) an appropriate solution to your needs."
  },
  {
    "objectID": "setup/git.html",
    "href": "setup/git.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Git is a ‘version control system’, which is a fancy way of saying that it has the potential to store a complete, line-by-line history of your work… so long as it’s in a plain-text format like Markdown or Python/R code files. Git updates all of this history on your computer every time you ‘commit’ the changes you’ve told it about by ‘adding’ a file. With GitHub you can then synchronise these changes so that you have a full backup (code and content are no longer just on your computer), publish a web site (via github.io), or collaborate with other people (via public, shared ‘repositories’).\nWhile it is not necessary that you learn all about how GitHub works now, it will be really helpful if you can get yourself set up with a GitHub account and install Git locally so that you’re ready to get when we start the term.\n\n\nYou will want to go to GitHub.com and then click the Sign up button at the top right. Follow the instructions for creating a new account from there.\n\n\n\nYou can follow along with GitHub’s own instructions for installing Git on your own computer. In many cases (especially if you use a Mac) you may find that Git is already installed, you just didn’t know it."
  },
  {
    "objectID": "setup/markdown.html",
    "href": "setup/markdown.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Footnotes\n\n\nNot all of these are still free.↩︎"
  },
  {
    "objectID": "setup/no_install.html",
    "href": "setup/no_install.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "The following options provide alternatives for those who are unable to install the full programming environment on their main computer and would otherwise be unable to continue with the module. Each of these has pros and cons but they allow you to run code ‘in the cloud’ and so mean that any internet-connected device can be used to write and run code.\n\n\n\n\n\n\n\n\nConfiguration for Staff\n\n\n\nPlease see the JupyterHub page for information about configuring a new environment.\n\n\nTo connect to JupyterHub:\n\nStart up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using your UCL credentials.\nIf you see a URL that ends in tree? please replace this with lab? to get the JupyterLab interface and not the original Jupyter Notebook interface (you can bookmark this page once it opens).\nCreate a new terminal: File > New > Terminal\n\nNote that you need to replace {group_name} with the appropriate group role (this value will be obvious once you’re logged in and can run ls /shared/groups/ in the Terminal):\nconda config --append envs_dirs /shared/groups/{group_name}/casa\njupyter contrib nbextension install --user\n\n\n\nGoogle’s Colaboratory is an easy way to get started without needing to install anything, while still being able to save your work. This approach will work well for the first few weeks, up to the point where we start loading larger data sets that require more memory than Google’s free tier provides. At that point you’ll either need to start sampling from the full data set, or you’re back to Docker!\nHere’s how to get started with Colab:\n\nGo to Google’s Colab site and sign in using your Google account details (or create an account if you don’t already have one).\nIf you are trying to clone a practical from Foundations then: choose File then Open and select the GitHub tab from the open options (it’s between Google Drive and Upload).\nEnter the following URL: https://github.com/jreades/fsds.\nYou should now see a list of notebooks to choose from – select the appropriate one from the sequence and click Open in Colab.\nYou will need to trust the notebook in order to run it.\n\nWhen you are done for the day you can save the notebook to your Google Drive – to re-run that notebook you can just load it from Google Drive, rather than going back to GitHub, but remember that you need to re-run all the cells up to the point where you saved the notebook. Being able to save and re-run a notebook is the main difference from Binder.\n\n\n\nWhile we support Binder for Code Camp, this is not a platform that we are supporting as part of our masters programme since it is impossible to save your work without downloading the notebook each time."
  },
  {
    "objectID": "skills/attention.html",
    "href": "skills/attention.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Learning to code is hard work and I’m pretty sure that I’m a lot less exciting than your average YouTube star. So if I have to compete with YouTube (or with your friends on WhatsApp, Snapchat, WeChat, or whatever) for your attention then I’ll probably lose. And your computer and phone are designed to distract you because they are interested in engagement—they don’t care that you should be engaging with your studies, they want you to pick them up and use them. This is why you get so many notifications!\nThere is plenty of evidence to back this up:\n\nDistractions make learning harder\nNearly half of students distracted by technology\nThe effect of cellphones on attention and learning…\nDistractions make retaining info harder\nThe interrupted learner: how distractions during live and video lectures influence learning outcomes\n\nSo my recommendations for studying (online or offline) are:\n\nTurn off as many notifications as possible. On the Mac there is a ‘Do not disturb’ setting that you can enable in the Notifications section of your System Preferences. You can set it to turn on by time, and also add a setting short-cut to your ‘Notification Centre’ (upper-right corner of your desktop).\nUninstall messaging apps that you cannot turn off. If quitting the app disables notifications then that’s fine. But if you can’t disable notifications then I’d suggest uninstalling the messaging app entirely. Facebook Messenger, for instance, is a massive memory-hog and usually available on the desktop UI anyway.\nBlock access to distracting web sites. There are a number of tools that you can set up to block access to Facebook and other social media sites at set times of day. My Achilles heel is the news: if I’m struggling I tend to read news articles, so if I really need to make sure I don’t have the browser open to the home page of my favourite news sites.\nWork out a schedule. It’s a lot easier to avoid distractions if you have a routine that enables you to say “OK, I will work from 9–11 and then have a look at my email.” It is easier to be in control if you can give yourself rewards later. And if you get into a routine, as a parent probably suggested when you were an undergraduate (certainly mine did and I ignored them), then you’ll find that your ‘productivity’ improves dramatically. My mother was right, dammit.\n\n\n\n\nFrequent distraction is one problem, but (in a sense) getting enough distraction is another. As this piece suggests, it’s also important that you give yourself downtime between Zoom/Teams/whatever sessions. I will try to remember to bake these into our ‘lectures’, but you should also suggest breaks if you feel yourself flagging! This also applies, however, to your wider degree: Masters degrees are intense and you need to give yourself permission for a timeout… stepping away from the computer and going for a walk, doing some knitting, taking a weekend to visit another city or go on a camping trip, whatever floats your boat!"
  },
  {
    "objectID": "skills/help.html",
    "href": "skills/help.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "We all need help from time to time—and that’s what we’re here to provide—but the best way to ‘get help’ will always be taking steps to ‘help yourself’ first!\n\n\nWhen you are first learning to code there is no such thing as a stupid question. From time to time we all have lazy questions, which is what happens when we are frustrated and just want to know ‘the answer’ without putting in the work to clarify the problem. However, if any time you find yourself stuck on a particular problem there is a 100% chance that someone else in the class is having the same problem as well but hasn’t quite worked up the courage to ask. So please: ask.\n\n\n\nHere are four things that you can do to ‘help yourself’ first:\n\nUse Google–this is one course where saying “I googled it…” will be taken as a good sign! Probably the biggest difference between a good programmer and a new programmer is that the good one knows which terms to type into Google to get the answer that they need right away.\nUse Stack Overflow–as you become a better programmer you’ll start to understand how to frame your question in ways that produce the answer you need in the first couple of search results, but whether you’re a beginner or an expert Stack Overflow is your friend. True story: I have sometimes found answers that I provided (but didn’t remember giving) when trying to solve a problem.\nUse the work of others–beyond the readings that we’ve assigned to support the module’s learning outcomes there is a world of knowledge out there on which you can build! Use Google Scholar, Medium, and dedicated tutorial-type sites like Towards Data Science and Programming Historian to see if you can find others who have had similar challenges.\nUse the dedicated Slack channel–this provides a much richer experience than the Moodle Forum and should be your primary means of requesting help outside of scheduled teaching hours because you can get answers from other staff, other students, and the wider CASA community.\n\nYes, this is a lot of things to do when you want to know the answer to what feels like a simple question, but it’s an investment. If we just ‘give’ you the answer then chances are you’ll forget it as soon as your code starts running again; hwoever, if you’ve had to invest your time and energy in sorting through a whole range of answers (some useful, some not) then you have found it for yourself in a way that you’ll not soon forget. In fact, you’ve learned something about both how to frame questions and how to identify useful answers. That, frankly, is a much more valuable skill!\n\n\n\nLearning to code is like learning a language: you need to practice! Set yourself little problems or tasks and see if you can apply what you’ve learned in class to a problem in a different class, or to a friend’s problem, or just something you’re curious about! In the same way that practicing your Chinese or French with native speakers will help you to learn those languages, so will practicing your Python.\n\n\n\nIf you’ve gone through steps 1–4 and don’t feel any closer to a solution then it’s time to get our input! So the final steps:\n\nMake use of ‘Office Hours’–if you are struggling, then tell us! We can’t help you if we don’t know that you’re lost! That doesn’t mean that we can simply ‘give’ you the answers to challenging questions, but we will do everything that we can to support you in finding and understanding the answers.\nEmail us–Slack will usually be faster, but for personal questions or ones you’re just not comfortable asking in public, then email away!\nSign up for online classes–realistically, you will have a lot on your plate this year, but if you want or need more practice with Python then there is a wealth of options out there for ‘further study’ and ‘further practice’. Perhaps you’ll find a resource that speaks to you in a way that our module doesn’t!\n\n\n\n\nHowever tired you are, don’t send a stream of consciousness late-night email saying little more than “Hey, I’m stuck on this problem can you solve it?” Go to bed. Sleep on it. And if you’re still stuck in the morning it’s time for the email.\nWhat does a useful email look like? You might want to follow this overview of how to get a busy person to respond to your email:\n\nKeep it short.\nFormat it for readability and clarity.\nMake it clear what you want me to do.\nBe reasonable with your request.\nShow me why I should take the time to help you.\n\nThat last point isn’t quite as rude as it sounds! If you’ve gone through steps 1–4 above, then it’s actually easy to explain what you’ve done, what you’ve found, why you think things aren’t working, and whether you have any ideas for solving your issue! If you’ve done all this then your question will never be a result of laziness, so that suggests there’s something for us to learn about how we teach!\nIn academia there are a few more things I’d add:\n\nWhat module are you emailing me about?\nWhat is your student id? (Especially if it’s about Extenuating Circumstances or an Assessment)\nIs the question about a specific practical, lecture, or technical problem?\n\nAnd here is some additional insight into how to email your professor (without being annoying AF):\n\nSalutation: should I use “Dear”, “Hello” or “Hi”?\nHonourific: should I use “Mr”, “Ms”, “Dr” or “Professor”? Hint: don’t ever use Mr/Mrs/Ms.\nName: for god’s sake, please try not to get this wrong.\nExceptions: always look at how your Prof or TA responds to you for cues about how to respond to them.\nBe nice: treat your TA and Prof like human beings please!\nRemind me who you are: anything that allows me to place you and your question in context will help me to give you effective help.\nThe reason: tell me as precisely as possible why you are emailing me and what you want/hope to achieve by doing so.\nDo the legwork (this is the ‘show me why I should take the time to help’ thing above): if the answer is in the Syllabus or the recorded content then I may not answer your question. Or I may just write “It’s in the syllabus” and leave it at that. Show me that you’ve tried to answer your question yourself and give me a sense of what you’ve already tried. For instance, if your problem is technical then “I couldn’t install the software and it didn’t work” tells me nothing about your actual problem (see also information on asking a good tech question).\nWrap-up and Sign-off: is there a deadline (e.g. for a recommendation) or some other issue that I need to factor into my plans? Some recognition of thanks never goes amiss.\n\n\n\nIf we don’t reply to you then send a reminder! The trick is to send the reminder at the right time: if you are about to fail an assessment or are three weeks into the course and still can’t run the programming environment then your problem is urgent and you can send a reminder much sooner than if you’re wondering ‘if X would be a good topic for the final assessment’. As the Medium blogger puts it: “If it can wait a week, let it wait a week” (before following up).\n\n\n\nWe all have different ‘registers’ for speaking with other people: family (siblings vs. grandparents), friends (close friends vs. acquaintances), and so on. A professionally-written email is a vital work skill since most of the people that you will end up working for will use email over all the other channels available now. Sending an email like this will not get you the help you need:\n\nHey Bossman,\nAre U awake at 2am like me? LOL. Having problems and not going to finish the report in time for meeting tomorrow. Can you give me an extension?\nLater.\n\nIf you’re worried that you might not be hitting the right ‘tone’ then it’s ok to say so and to ask if you could write it better/differently in the future. This shows reflection and thought, which is all that we really want from our students anyway!\n\n\n\n\nFinally, we want you to think about how to learn what you need to learn. This is called meta-cognition—thinking about thinking—and it’s probably one of the most important study skills of all. So here you need to think about what you want from, for example, an assessment: do you just want to pass, or do you want to hit it out of the park?\nSome questions to ask yourself:\n\nFor an exam: What kinds of questions might it include?\nFor an essay/written piece: What kinds of topics have we covered in class?\nFor either: identify key terms, define those terms, and question the question (what might be the assumptions behind it?).\nWhich of resources would help me to study/prepare?\nHow should I make use of lecture notes, practice exam questions, textbook and other readings, instructor office hours, peer discussions, and tutoring. Write down why each resource would be useful and how you could use it to map out a study/writing plan.\nHow does my essay work as a story? I don’t necessarily mean a mystery or adventure novel, but a good essay has: a plot (what is sometimes called a narrative arc), characters (the key ideas from the literature, the data, the methods, the problems…), development (which character needs to be introduced first?), and a conclusion (what happened?). Have a look at the Tim Squirrel Guide where it talks about essay stucture.\nLooking at this literature/piece of research, is this the way that I would have done it? If I would have done it differently do I think that would have been more, or less, effective? Why or why not?\nLooking at my peers, is there someone who is doing really well who I could talk to about how they study, code, or write? How do they organise their time? How do they make use of the resources (literature, etc.)?\n\nIf all you want is a pass then organise yourself for a solid pass. If you want to excel then you’re going to have to do things a bit differently. There’s space for both approaches, but being clear about which you want will help you to prioritise the important stuff."
  },
  {
    "objectID": "index.html#requirements",
    "href": "index.html#requirements",
    "title": "CASA Computing Environment",
    "section": "Requirements",
    "text": "Requirements\nBefore trying to do anything else please complete the basic health check, which also includes our recommendations if you are considering buying a new computer when you start your studies. Once you know that your machine and operating system are up-to-date, you should install the basic utilities that will enable you to complete installation of the programming environment. We also provide information about Code Camp which is a self-paced introduction to the fundamentals of programming in Python."
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "CASA Computing Environment",
    "section": "Installation",
    "text": "Installation\nOnce you’ve ticked off the Requirements, you can start installing the tools that you will use to write and run both code and documentation. You will need set up Git and GitHub in order to manage, share, and version code. To write documentation and comments on code you will be want a Markdown editor and to familiarise yourself with Markdown’s syntax. And, finally, you will need to install the programming environment."
  },
  {
    "objectID": "index.html#no-install",
    "href": "index.html#no-install",
    "title": "CASA Computing Environment",
    "section": "No Install",
    "text": "No Install\nIf you are unable to get your hands on a machine that meets the basic requirements or on to which you can install the necessary tools, then you should look at the no install options. These are generally cloud-based options and are necessarily a ‘second best’ since limitations imposed by the provider mean that you probably won’t be able to process the full data set with which we’ll be working, but as a stop-gap they are perfectly useable.\nA more detailed set of instructions can also be found in Dani’s Repo. Read this if you have trouble!"
  },
  {
    "objectID": "index.html#to-dos",
    "href": "index.html#to-dos",
    "title": "CASA Computing Environment",
    "section": "To Dos",
    "text": "To Dos\n\n\n\n\n\n\nImportant\n\n\n\n\n\nAdd mgwr to image?\n\nAdd VS Code Server to image so can use VSCode as well as jupyter lab"
  },
  {
    "objectID": "index.html#citing",
    "href": "index.html#citing",
    "title": "CASA Computing Environment",
    "section": "Citing",
    "text": "Citing\nThis draws heavily on Dani Arribas-Bel’s work for Liverpool. If you use this, you should cite him.\n\n\n\nDOI\n\n\n@software{hadoop,\n  author = {{Dani Arribas-Bel}},\n  title = {\\texttt{gds_env}: A containerised platform for Geographic Data Science},\n  url = {https://github.com/darribas/gds_env},\n  version = {3.0},\n  date = {2019-08-06},\n}"
  },
  {
    "objectID": "setup/index.html",
    "href": "setup/index.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Once you’ve ticked off the Requirements, you can start installing the tools that you will use to write and run both code and documentation. You will need set up Git and GitHub in order to manage, share, and version code. To write documentation and comments on code you will be want a Markdown editor and to familiarise yourself with Markdown’s syntax. And, finally, you will need to install the programming environment.\n\n\n\nIf you are unable to get your hands on a machine that meets the basic requirements or on to which you can install the necessary tools, then you should look at the no install options. These are generally cloud-based options and are necessarily a ‘second best’ since limitations imposed by the provider mean that you probably won’t be able to process the full data set with which we’ll be working, but as a stop-gap they are perfectly useable."
  },
  {
    "objectID": "setup/jupyter_hub.html",
    "href": "setup/jupyter_hub.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Start up the UCL VPN.\nConnect to JupyterHub\nAuthenticate using UCL credentials.\nCreate a new terminal: File > New > Terminal\n\n\n\n\nThe ISD instructions are not correct in the sense that the use of a symlink can cause problems and duplicated environments down the line. Anyway, type the following, but note that you need to replace {replace_this_with_group_name} with the appropriate group name (this will be obvious once logged in and you can run ls /shared/groups/):\ncourse_name=\"casa0013\"\ngroup_name=\"{replace_this_with_group_name}\"\nconda config --add envs_dirs /shared/groups/${group_name}/casa\ncurl -o /tmp/${course_name}.yml https://raw.githubusercontent.com/jreades/sds_env/master/conda/environment_py.yml\nconda env create -p /shared/groups/${group_name}/casa -f /tmp/${course_name}.yml\n\n\n\nTwo shortcomings in the existing approach of generating environment_py.yml were identified and need to be tweaked in the Makefile:\n\nRemove anything with linux in it\nRemove version from gitpython.\nRemove python-graphviz entirely.\n\nAdditional issues may exist with replication to non-Linux systems."
  },
  {
    "objectID": "skills/index.html",
    "href": "skills/index.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "We think that there are some fundamentally important soft-skills for successfully completing a MSc: we try to teach these in our modules as well, but we think it’s useful to flag them here as well:\n\nPaying attention: learning how to deal with distractions is essential to maintaining focus and retaining the infromation you’re taking in through reading and coding.\nReading: too many students try to read either everything or nothing when they should be doing something in between, so we’ve tried to collect some ideas on how to read to help you get started.\nThinking: the other big challenge for many students is learning how to approach literature and learning critically so that you learn how to integrate ideas and form your own. Learning how to think for yourself is essential.\nAsking for help: just because we want you to become an organised, motivated self-learner does not mean we don’t want to help you achieve this! Suffering in silence is not going to get you extra marks, so we’ve also offered tips on how to ask for help in a way that is most likely to get you what you need.\n\nThese pages are by no means complete, nor will the advice they offer work for everyone, but it is absolutely essential that you are as aware of how you learn as you are of what you are learning. The skill of ‘meta-cognition’ is one that will allow you to carry on learning effectively for the rest of your life!"
  },
  {
    "objectID": "skills/reading.html",
    "href": "skills/reading.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Although the guidance below, from Tim Squirrel’s Guide is intended for undergraduate essays in history or philosophy, the advice works for all kinds of reading.\n\n\nYou’re be hearing a lot more about this at the start of term, but the first part of reading is making sure that you are able to trace where the ideas that you’re presenting/discussing/refuting came from. So that means keeping track of what you’ve read and being able to reference it (correctly) right from the start. So a quick sense of how to reference reliably:\n\nIf you are using the exact words of another writer then use double-quotes and supply a page number. For example: As Reades (2021, p.45) wrote: “We need to reference properly because otherwise we have no sense of where an idea came from…”\nIf you are paraphrasing another writer then use single-quotes and supply a page number where relevant. For example: Reades (2021, p.45) argues for the importance of good referencing since ‘without it we have little sense of where ideas come from’…\nIf you are just making a general point then a simple Author and Year citation is sufficient. For example: Reades(2021) and others (Dennett 2015, Fry 2018) have noted the importance of good referencing practice…\n\n\n\n\nIdeally, whenever you are reading an academic article (or other publication) you should be thinking about how you would differ from or improve upon or disagree with the writer. The only way you can do this (and consequently, the only way to get a decent mark) is to do some careful reading:\n\nLook at the reading list. If it seems incredibly long, then your instructor is not expecting you to read it all. What they are expecting you to do is look through it and pick out the articles that speak to you (subject to guidance about what reading is essential) and to your take on the assessments. So a long reading list is not an excuse to not read any of it. Look through the list, identify if there are any readings marked as essential. Read them. If there aren’t any essential readings, pick a few which look interesting and relevant, then read them.\nRead some more. Look through the reference lists of the papers and books you’ve just read. See where their ideas came from. Mark out a few of the most promising-looking readings. Read them.\nNote the difference between reading to understand the topic, and reading to reference. It is totally fine to use Wikipedia, lecture notes, etc to familiarise yourself with the key arguments and concepts. It is considerably less fine to cite them as your only sources.\nBooks. In an ideal world you should read books. Great books. Like mine of course! :-) More realistically, unless your entire dissertation hinges on a particular argument made in great detail, then for undergraduate and masters’ study do not read whole books. It’s a waste of your time. You won’t remember any of it, it will drain all of your energy, and you only get one reference and viewpoint out of it. Read the intro and conclusion so that you get the gist of their argument. Pick a chapter from the contents page which looks like it’s relevant to your essay. Read that. As above, find relevant references and follow them up.\nArticles. Read the abstract first. Does it look like it’s relevant? If not, don’t waste your time. If it does, read it. Check the bibliography as above.\nRead critically. For the sake of all that is holy, read critically. This is absolutely essential. Don’t just stare at the pages and absorb them, bovine-like, for the purposes of regurgitation into your essay.\n\nSo things to think about while reading articles:\n\nThe central claim the author is making. Usually there is only one, perhaps two. Summarise it in one sentence if you can.\nWhat is the frame of their argument? When in history is it set? Who are the key actors? Are they responding to another author? If so, what is the argument they’re responding to? Try to position their argument in context. This allows you to:\nCritically assess the claims made. This obviously doesn’t just mean ‘say they’re wrong’. They might well be wrong, but you’ll need to find reasons for it. Generate a list of three reasons for each line of attack you want to take. Scrap the weakest two. If you think they’re right, why are they right? Are there other authors who corroborate their claims? Are there logical reasons to prefer their argument?\n\nMake sure you take notes on everything you read. Put page numbers in those notes. In fact, write down any potentially useful (and, ideally, flexible) quotes verbatim with the page numbers. Your goal is to read everything once even if you reference it repeatedly."
  },
  {
    "objectID": "skills/thinking.html",
    "href": "skills/thinking.html",
    "title": "CASA Computing Environment",
    "section": "",
    "text": "Another challenge for many students is that they want the ‘right’ answer to how to do things. There’s more academic literature on this, but for a thought-provoking look at why it might be a good idea for us to make your life hard then What IKEA and Our Education System Have in Common is an easy read.\nHere’s the summary:\n\nIKEA is easy, but you don’t learn anything.\nIKEA is about getting things done/finishing.\nIKEA is convenient, but it’s not creative.\nIKEA is standardised, but it is actually primed for hacking.\n\nBut there is a great response to the original post that adds nuance to this:\n\nThe thing to keep in mind, though, is that following recipies is how we learn skills to start with. If you were teaching someone to cook, for example, you wouldn’t throw the person into the kitchen and tell them to be creative with the food. Instead, you would teach them to follow recipies so that they can practice skills, and learn how to properly balance flavours and textures. Then, when they’ve mastered some recipies, you teach them how to mix up and re-combine recipies, and eventually come up with their own.\n\n\n\n\nFor the record, there are many things that can’t be solved by code or coders, but there are many things that can be tackled by learning to think like a programmer. This can include:\n\nUnderstanding: make sure that you actually understand the problem before you try to solve it. Try to explain it to someone else. Try to explain it to a pet or stuffed animal. Write it down. You may feel silly doing some of these things, but saying it/writing it forces you to organise your thoughts and often gives you the answer halfway through the explanation.\nPlanning: “Given X, what steps do I need to achieve Y?” You can start with comments, bullet points, or whatever format helps you to get the skeleton of an answer in place before you spend ages writing the first few lines of code or the first few lines of your essay. Markdown is good here!\nDividing: never try to solve a hard problem in one go. Break it down into little steps. Easy steps. Do the easiest one first (if you can separate it out from the first one). Check your solution works for that part. Take the next step. Check the two steps work together. Build from there. As programmers and Venture Capitalists would tell you: iterate! Same for an essay or written submission.\nUnsticking: try to stay curious rather than getting angry or frustrated. Debugging is a step-by-step process: comment things out, add print statements, break it back down again into the basics and gradually re-add pieces until you can see where it all breaks.\nPracticing: I like this quote “Practice. Practice. Practice. It’ll only be a matter of time before you recognize that ‘this problem could easily be solved with .’”\n\n\n“The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.” — Andrew Singer\n\nOn a more practical level, here are common mistakes made by new programmers.\n\n\n\n\nWe will not give you the answer. This will be frustrating and annoying (particularly when you are already frustrated that something is not working) but by asking you questions we will try to teach you to solve problems for yourself.\nIf you keep asking us the same questions you will get increasingly abrupt answers. You should be scared to ask us the same question for the 20th time. You should not be scared to admit that you’re struggling with something.\nSometimes there is no answer! Every year the data changes. The policies and issues change. I teach things a little differently. This is much more like the real world and sometimes I don’t know what we’ll find when we start coding.\nYou need to work out how you learn best.\nYou will need to think critically about what you are doing. There’s a good article on How to write better essays which leads on to a blog on how to write better undergraduate essays (see above). You’re obviously not undergraduates any more and we expect more of you, but as a starting point this is a good one, especially for those of you who are new to the UK way of teaching and learning."
  }
]